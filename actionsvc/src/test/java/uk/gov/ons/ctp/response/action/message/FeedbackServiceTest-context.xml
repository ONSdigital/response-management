<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
  xmlns:jms="http://www.springframework.org/schema/jms" xmlns:p="http://www.springframework.org/schema/p"
  xmlns:int-jme="http://www.springframework.org/schema/integration"
  xmlns:int="http://www.springframework.org/schema/integration"
  xmlns:int-jms="http://www.springframework.org/schema/integration/jms"
  xmlns:int-xml="http://www.springframework.org/schema/integration/xml"
  xmlns:int-file="http://www.springframework.org/schema/integration/file"
  xsi:schemaLocation="http://www.springframework.org/schema/beans   
  http://www.springframework.org/schema/beans/spring-beans-4.2.xsd  
  http://www.springframework.org/schema/context  
  http://www.springframework.org/schema/context/spring-context-4.2.xsd  
  http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
  http://www.springframework.org/schema/integration/jms http://www.springframework.org/schema/integration/jms/spring-integration-jms.xsd
  http://www.springframework.org/schema/jms  
  http://www.springframework.org/schema/jms/spring-jms-4.2.xsd
  http://www.springframework.org/schema/integration/file
  http://www.springframework.org/schema/integration/file/spring-integration-file.xsd
  http://www.springframework.org/schema/integration/xml
  http://www.springframework.org/schema/integration/xml/spring-integration-xml.xsd">

  <!-- The JMS broker -->
<!--
  <bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
    <property name="brokerURL" value="tcp://localhost:61616" />
  </bean>
  -->
  <bean id="connectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
    <property name="targetConnectionFactory">
      <bean class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="tcp://localhost:61616" />
<!-- 				<property name="brokerURL" value="vm://localhost"/>
 -->			</bean>
    </property>
    <property name="sessionCacheSize" value="10"/>
  </bean>

  <!--  First the inbound flow -->

  <!-- The inbound message container config - the inbound queue is defined here -->
  <bean id="feedbackMessageListenerContainer"
    class="org.springframework.jms.listener.DefaultMessageListenerContainer">
    <property name="connectionFactory" ref="connectionFactory" />
    <property name="destinationName" value="feedbackQueue" />
    <property name="maxConcurrentConsumers" value="1" />
    <property name="concurrentConsumers" value="1" />
    <property name="receiveTimeout" value="5000" />
    <property name="recoveryInterval" value="60000" />
    <property name="autoStartup" value="true" />
  </bean>

  <!-- need an input channel defined for MQ adapter to input to -->
  <int:channel id="feedback_xml" />

  <!-- anything sent to this channel is written to disk -->
  <int:channel id="feedback_xml_invalid" />
  <int-file:outbound-channel-adapter directory ="/var/log/ctp/responsemanagement/actionsvc/feedback" channel="feedback_xml_invalid"/>	

  <!-- the MQ channel adapter reads from testQueue (see the container above) and inputs to feedback.xml -->
  <int-jms:message-driven-channel-adapter
    id="jmsIn" container="feedbackMessageListenerContainer" channel="feedback_xml" />

  <!-- First the SI message provided by the channel adapter is validated against the inbound schema -->
  <int-xml:validating-filter id="feedbackValidator" input-channel="feedback_xml"
    output-channel="feedback_xml_valid" schema-location="classpath:xsd/inboundMessage.xsd" discard-channel="feedback_xml_invalid"/>

  <!-- Secondly the now validated xml is transformed into the jaxb generated object model -->
  <int:channel id="feedback_transformed">
  	<int:queue/>
  </int:channel>
  	
  <int-xml:unmarshalling-transformer
    input-channel="feedback_xml_valid" output-channel="feedback_transformed"
    unmarshaller="feedbackUnmarshaller" />

  <!-- The transformer uses this unmarshaller to do the heavy (un)lifting -->
  <bean id="feedbackUnmarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
    <property name="contextPath" value="uk.gov.ons.ctp.response.action.message.feedback" />
  </bean>

  <!-- Finally .. see the  @ServiceActivator(inputChannel="feedback.transformed") -->




  <!--  Now configure the outbound flow -->
  <!-- setup the outbound jms queues -->
  <bean id="fieldInstructionQueue" class="org.apache.activemq.command.ActiveMQQueue">
    <constructor-arg value="Action.Field"/>
  </bean>
  <bean id="printerInstructionQueue" class="org.apache.activemq.command.ActiveMQQueue">
    <constructor-arg value="Action.Printer"/>
  </bean>
  <bean id="supportInstructionQueue" class="org.apache.activemq.command.ActiveMQQueue">
    <constructor-arg value="Action.CensusSupport"/>
  </bean>
  <bean id="householdSurveyInstructionQueue" class="org.apache.activemq.command.ActiveMQQueue">
    <constructor-arg value="Action.HHSurvey"/>
  </bean>
  <bean id="hotelSurveyInstructionQueue" class="org.apache.activemq.command.ActiveMQQueue">
    <constructor-arg value="Action.HotelSurvey"/>
  </bean>


  <int:annotation-config/>
  <!--  setup the outbound channels - note each queue needs a channel -->
  <int:channel id="instruction.outbound" />
  <int:channel id="instruction.xml" />
  <int:channel id="instruction.Field" />
  <int:channel id="instruction.Printer" />
  <int:channel id="instruction.CensusSupport" />
  <int:channel id="instruction.HHSurvey" />
  <int:channel id="instruction.HotelSurvey" />

  <!--  the @Publisher sends to the marshalling-transformers input channel -->
  <int-xml:marshalling-transformer
    input-channel="instruction.outbound" output-channel="instruction.xml"
    marshaller="instructionMarshaller" 
    result-transformer="instructionTransformer"/>
   <!--  the instructionMarshaller turns java objs into xml dom -->
  <bean id="instructionMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
    <property name="contextPath" value="uk.gov.ons.ctp.response.action.message.instruction" />
  </bean>
  <!--  the instructionTransformer turns the xml dom into a string -->
  <bean id="instructionTransformer" class="org.springframework.integration.xml.transformer.ResultToStringTransformer" />

  <!-- the router ... routes ... using the header 'HANDLER' set by the @Publisher -->
  <!-- the  SpEL constructs the channel name to send our xml string to -->
  <int:router input-channel="instruction.xml" expression="'instruction.'.concat(headers.HANDLER)" />

  <!--  each channel adapter listens to one of our routed channels and adapts the SI message to a JMS message -->
  <int-jms:outbound-channel-adapter id="jmsout.Field" channel="instruction.Field" destination="fieldInstructionQueue"/>
  <int-jms:outbound-channel-adapter id="jmsout.Printer" channel="instruction.Printer" destination="printerInstructionQueue"/>
  <int-jms:outbound-channel-adapter id="jmsout.CensusSupport" channel="instruction.CensusSupport" destination="supportInstructionQueue"/>
  <int-jms:outbound-channel-adapter id="jmsout.HHSurvey" channel="instruction.HHSurvey" destination="householdSurveyInstructionQueue"/>
  <int-jms:outbound-channel-adapter id="jmsout.HotelSurvey" channel="instruction.HotelSurvey" destination="hotelSurveyInstructionQueue"/>
</beans>

