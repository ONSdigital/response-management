<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:int="http://www.springframework.org/schema/integration"
 xmlns:int-jms="http://www.springframework.org/schema/integration/jms"
 xsi:schemaLocation="http://www.springframework.org/schema/beans
  http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
  http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
  http://www.springframework.org/schema/integration/jms
  http://www.springframework.org/schema/integration/jms/spring-integration-jms.xsd" >

  <!-- Message listener on ActiveMQ.DLQ in VM memory -->
  <bean id="activeMQListenerContainer"
        class="org.springframework.jms.listener.DefaultMessageListenerContainer">
    <property name="connectionFactory" ref="connectionFactory" />
    <property name="destinationName" value="ActiveMQ.DLQ" />
    <property name="maxConcurrentConsumers" value="1" />
    <property name="concurrentConsumers" value="1" />
    <property name="autoStartup" value="true" />
  </bean>

  <!-- Setup Input channel to receive failed messages-->
  <int:channel id="activeMQDLQXml">
    <int:queue capacity="1" />
  </int:channel>

  <!-- Adapter listening on JMS queue to check for failed messages -->
  <int-jms:message-driven-channel-adapter
    id="jmsIn" container="activeMQListenerContainer" channel="activeMQDLQXml"/>

  <!-- case notification jms queue which can be used for testing -->
  <int:channel id="caseNotificationOutbound" />

  <bean id="caseNotificationJMSQueue" class="org.apache.activemq.command.ActiveMQQueue">
    <constructor-arg value="Case.LifecycleEvents"/>
  </bean>

  <!--  adapt the SI message to a JMS message -->
  <int-jms:outbound-channel-adapter id="jmsout" channel="caseNotificationOutbound" destination="caseNotificationJMSQueue"/>

  <!-- Notification Receiver ServiceActivator(inputChannel = "notificationTransformed") -->
  <bean id="notificationReceiver" class="uk.gov.ons.ctp.response.action.message.impl.CaseNotificationReceiverImpl" />

  <!-- Mock notificationService to inject into notificationReceiver -->
  <bean id="notificationService" class="org.mockito.Mockito" factory-method="mock"  >
    <constructor-arg value="uk.gov.ons.ctp.response.action.service.impl.CaseNotificationServiceImpl" />
  </bean>

  <!-- Mock actionCaseRepository to inject into notificationService -->
  <bean id="notificationActionCaseRepository" class="org.mockito.Mockito" factory-method="mock"  >
    <constructor-arg value="uk.gov.ons.ctp.response.action.domain.repository.ActionCaseRepository" />
  </bean>
  <!-- Mock actionPlanRepository to inject into notificationService -->
  <bean id="notificationActionPlanRepository" class="org.mockito.Mockito" factory-method="mock"  >
    <constructor-arg value="uk.gov.ons.ctp.response.action.domain.repository.ActionPlanRepository" />
  </bean>
  <!-- Mock actionService to inject into notificationService -->
  <bean id="notificationActionService" class="org.mockito.Mockito" factory-method="mock"  >
    <constructor-arg value="uk.gov.ons.ctp.response.action.service.impl.ActionServiceImpl" />
  </bean>
  <!-- Mock surveyRepository to inject into notificationService -->
  <bean id="notificationSurveyRepository" class="org.mockito.Mockito" factory-method="mock"  >
    <constructor-arg value="uk.gov.ons.ctp.response.action.domain.repository.SurveyRepository" />
  </bean>
  <!-- Mock actionRepository to inject into notificationService -->
  <bean id="notificationActionRepository" class="org.mockito.Mockito" factory-method="mock"  >
    <constructor-arg value="uk.gov.ons.ctp.response.action.domain.repository.ActionRepository" />
  </bean>
  <!-- Mock actionTypeRepository to inject into notificationService -->
  <bean id="notificationActionTypeRepository" class="org.mockito.Mockito" factory-method="mock"  >
    <constructor-arg value="uk.gov.ons.ctp.response.action.domain.repository.ActionTypeRepository" />
  </bean>
  <!-- Mock actionTypeRepository to inject into notificationService -->
  <bean id="notificationStateTransitionManager" class="org.mockito.Mockito" factory-method="mock"  >
    <constructor-arg value="uk.gov.ons.ctp.common.state.StateTransitionManager" />
  </bean>
  

</beans>
